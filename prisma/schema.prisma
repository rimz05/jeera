// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String             @id
  name          String
  email         String             @unique
  about         String?
  industryType  String
  role          String
  country       String
  workspace     WorkspaceMembers[]
  image         String?
  tasks         Task[]
  activities    Activity[]
  comments      Comment[]
  subscriptions Subscription[]

  onboardingCompleted Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Workspace {
  id          String             @id
  name        String
  description String?
  ownerId     String
  members     WorkspaceMembers[]
  projects    Project[]
  inviteCode  String             @unique
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

enum AccessLevel {
  ADMIN
  MEMBER
  VIEWER
}

model WorkspaceMembers {
  id     String @id
  userId String
  User   User   @relation(fields: [userId], references: [id])

  workspaceId String
  Workspace   Workspace @relation(fields: [workspaceId], references: [id])

  accessLevel AccessLevel @default(MEMBER)
  projectAccess ProjectAccess[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([workspaceId])
}

model Project {
  id          String   @id
  name        String
  description String?
  workspaceId String
  Workspace   Workspace @relation(fields: [workspaceId],  references: [id], onDelete: Cascade)
  tasks       Task[]
  activities  Activity[]
  comments    Comment[]
  projectAccess ProjectAccess[]
  documentation Documentation?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([workspaceId])
}

model ProjectAccess {
  id                 String @id @default(uuid())
  workspaceMemberId  String
  workspaceMember    WorkspaceMembers @relation(fields: [workspaceMemberId], references: [id], onDelete: Cascade)

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  hasAccess Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([workspaceMemberId, projectId])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  IN_REVIEW
  BACKLOG
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    TaskPriority @default(LOW)
  startDate     DateTime
  dueDate       DateTime

  postion     Int
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  assigneeId  String?
  assignedTo  User? @relation(fields: [assigneeId], references: [id], onDelete: Cascade)


  attachments File[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Activity {
  id        String   @id @default(uuid())
  type      String
  description String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([projectId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String 
  projectId String
  userId    String

  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
  @@index([userId])
}

model Documentation{
  id        String   @id @default(uuid())
  projectId String   @unique
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project  @relation(fields: [projectId], references: [id])
  updatedBy String?
}
enum FileType {
  IMAGE
  DOCUMENT
}

model File {
  id        String   @id @default(uuid())
  filename  String
  url       String
  taskId    String?
  projectId String?
  type FileType

  task      Task?     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

enum SubscriptionPlan {
  FREE
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PAST_DUE
}
model Subscription {
  id              String            @id @default(uuid())
  userId          String            @unique
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan            SubscriptionPlan  @default(FREE)
  status          SubscriptionStatus @default(ACTIVE)
  lemonsqueezyId  String?          // Lemon Squeezy subscription ID
  orderId         String?          // Lemon Squeezy order ID
  customerId      String?          // Lemon Squeezy customer ID
  currentPeriodEnd DateTime?
  frequency       String       @default("monthly")
  cancelAtPeriodEnd Boolean       @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([userId])
}